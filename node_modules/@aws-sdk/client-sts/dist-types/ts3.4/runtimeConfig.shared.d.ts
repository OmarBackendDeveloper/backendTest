import { AwsSdkSigV4Signer } from "@aws-sdk/core";
import { NoAuthSigner } from "@smithy/core";
import { IdentityProviderConfig } from "@smithy/types";
import { STSClientConfig } from "@aws-sdk/client-sts/dist-types/ts3.4/STSClient";
export declare const getRuntimeConfig: (config: STSClientConfig) => {
  apiVersion: string;
  base64Decoder: import("@smithy/types").Decoder;
  base64Encoder: (_input: string | Uint8Array) => string;
  disableHostPrefix: boolean;
  endpointProvider: (
    params: import("@aws-sdk/client-sts/dist-types/ts3.4/endpoint/EndpointParameters").EndpointParameters,
    context?:
      | {
          logger?: import("@smithy/types").Logger | undefined;
        }
      | undefined
  ) => import("@smithy/types").EndpointV2;
  extensions: import("@aws-sdk/client-sts/dist-types/ts3.4/runtimeExtensions").RuntimeExtension[];
  httpAuthSchemeProvider: import("@aws-sdk/client-sts/dist-types/ts3.4/auth/httpAuthSchemeProvider").STSHttpAuthSchemeProvider;
  httpAuthSchemes:
    | import("@smithy/types").HttpAuthScheme[]
    | (
        | {
            schemeId: string;
            identityProvider: (
              ipc: IdentityProviderConfig
            ) =>
              | import("@smithy/types").IdentityProvider<
                  import("@smithy/types").Identity
                >
              | undefined;
            signer: AwsSdkSigV4Signer;
          }
        | {
            schemeId: string;
            identityProvider: (
              ipc: IdentityProviderConfig
            ) =>
              | import("@smithy/types").IdentityProvider<
                  import("@smithy/types").Identity
                >
              | (() => Promise<{}>);
            signer: NoAuthSigner;
          }
      )[];
  logger: import("@smithy/types").Logger;
  serviceId: string;
  urlParser: import("@smithy/types").UrlParser;
  utf8Decoder: import("@smithy/types").Decoder;
  utf8Encoder: (input: string | Uint8Array) => string;
};
